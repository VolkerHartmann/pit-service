plugins {
    // Spring boot & dependency management:
    // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id "io.spring.dependency-management" version "1.0.11.RELEASE"
    // Lombok generates getter and setter and more. https://projectlombok.org/
    // check for new versions here: https://plugins.gradle.org/plugin/io.freefair.lombok
    id "io.freefair.lombok" version "6.3.0"
    id 'java'

    // test and docs dependencies
    id 'jacoco'
    //id "com.github.kt3k.coveralls" version "2.12.0" 
    id "org.owasp.dependencycheck" version "6.5.0.1"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

lombok {
    // check here for new versions: https://projectlombok.org/download
    version = '1.18.22'
}

jacoco {
    // check here for new versions: https://www.jacoco.org/jacoco/
    toolVersion = "0.8.7"
}

archivesBaseName = 'pit-service'
description = "A gateway to manage PIDs containing profiles and typed attributes."
version = '0.3'
group = 'edu.kit.datamanager'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

 
configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

if (project.hasProperty('release') || project.hasProperty('clean-release')) {
    println 'Using release profile for building ' + project.getName()
    apply from: 'gradle/profile-release.gradle'   
}

dependencies {
    // Due to the spring boot gradle plugin, we can omit versions in spring
    // dependencies. It will automatically choose the fitting ones.
    implementation("edu.kit.datamanager:service-base:0.2.1")

    // More flexibility when (de-)serializing json:
    //implementation("com.monitorjbl:spring-json-view:1.1.0")
	implementation("com.github.everit-org.json-schema:org.everit.json.schema:1.14.0")
    
    implementation('org.apache.httpcomponents:httpclient:4.5.13')
    implementation('org.apache.httpcomponents:httpclient-cache:4.5.13')

    testImplementation("org.springframework:spring-test")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("org.mockito:mockito-core:4.0.0")
    testImplementation("org.springframework.security:spring-security-test")
}

// Makes executable jar file.
// Available function available through Spring Boot Gradle Plugin.
bootJar {
    manifest {
        // "Looks in various places for a properties file to extract loader settings,
        // defaulting to loader.properties either on the current classpath or in the
        // current working directory."
        // Docs:
        // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.configuring.main-class
        // https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/loader/PropertiesLauncher.html
        attributes 'Main-Class': 'org.springframework.boot.loader.PropertiesLauncher'
    }

    // Include documentation to be available on runtime.
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }

    // Make pit executable without `java -jar`
    // by adding a launch script into the jar file.
    // Works only on unix platforms.
    // https://docs.spring.io/spring-boot/docs/current/gradle-plugin/reference/htmlsingle/#packaging-executable.configuring.launch-script
    launchScript()
}

compileJava {
    // Display more warnings when compiling.
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    finalizedBy jacocoTestReport
    environment "spring.config.location", "classpath:/test/"

    testLogging {
        // tests are never "up-to-date", always print everything
        outputs.upToDateWhen {false}
        // show stdio when tests are running
        showStandardStreams = true
    }
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        //exclude some classes/package from code coverage report
        classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [\
            'edu/kit/datamanager/collection/configuration/**', \
            'edu/kit/datamanager/collection/filters/**', \
            'edu/kit/datamanager/collection/Application*'
                        ])
                }))
    }
}

